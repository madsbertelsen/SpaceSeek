name: CI

on: [push, pull_request]

jobs:
  setup-and-tests:
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Specify node version
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Post Install
        env:
          GOOGLE_MAPS_KEY_ANDROID: ${{ secrets.GOOGLE_MAPS_KEY_ANDROID }}
        run: |
          sed -i.bak ''s/REPLACE_BUILD_NUMBER/${GITHUB_RUN_NUMBER}/'' .env
          sed -i.bak ''s/REPLACE_MAPS_KEY/${GOOGLE_MAPS_KEY_ANDROID}/'' .env

      - name: Install deps
        run: |
          yarn --frozen-lockfile --network-timeout 1000000

      - name: Lint
        run: |
          yarn lint:ci

      - name: Unit Tests
        run: |
          yarn test

  e2e-ios:
    needs: setup-and-tests
    runs-on: macos-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Specify node version
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Caching cocoa pods
        timeout-minutes: 5
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install deps
        run: |
          yarn --frozen-lockfile --network-timeout 1000000

      - name: Cocoapod install
        run: |
          npx pod-install ios

      - name: Post Install
        env:
          GOOGLE_MAPS_KEY_ANDROID: ${{ secrets.GOOGLE_MAPS_KEY_ANDROID }}
        run: |
          sed -i.bak ''s/REPLACE_BUILD_NUMBER/${GITHUB_RUN_NUMBER}/'' .env
          sed -i.bak ''s/REPLACE_MAPS_KEY/${GOOGLE_MAPS_KEY_ANDROID}/'' .env

      - name: Detox setup
        run: |
          brew tap wix/brew
          brew install applesimutils

      - name: Build
        run: |
          yarn build:ios-release

      - name: E2E test
        timeout-minutes: 15
        run: |
          npx detox clean-framework-cache && npx detox build-framework-cache
          yarn test:ios-release

  e2e-android:
    needs: setup-and-tests
    runs-on: macos-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Specify node version
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install deps
        run: |
          yarn --frozen-lockfile --network-timeout 1000000

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Post Install
        env:
          GOOGLE_MAPS_KEY_ANDROID: ${{ secrets.GOOGLE_MAPS_KEY_ANDROID }}
        run: |
          sed -i.bak ''s/REPLACE_BUILD_NUMBER/${GITHUB_RUN_NUMBER}/'' .env
          sed -i.bak ''s/REPLACE_MAPS_KEY/${GOOGLE_MAPS_KEY_ANDROID}/'' .env
          mkdir -p ./artifacts

      - name: Use specific Java version for sdkmanager to work
        uses: joschi/setup-jdk@v2
        with:
          java-version: '8'
          architecture: 'x64'

      - name: Build
        working-directory: android
        env:
          KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          AT: ${{ secrets.ANDROID_TOKEN }}
          ANDROID_KEYSTORE_PROPERTIES: ${{ secrets.ANDROID_KEYSTORE_PROPERTIES }}
        run: |
          echo "$KEYSTORE" | base64 -d > ./release.keystore
          echo "$AT" | base64 -d > ./play.json
          echo "$ANDROID_KEYSTORE_PROPERTIES" | base64 -d > ./keystore.properties
          yarn build:android-release

      - name: Download Android Emulator Image
        run: |
          echo y | sudo $ANDROID_HOME/tools/bin/sdkmanager "system-images;android-28;google_apis;x86_64" > /dev/null
          $ANDROID_HOME/tools/bin/avdmanager -s create avd -n emu -k "system-images;android-28;google_apis;x86_64" -c 512M -d "Nexus S" -f

      - name: Start Emulator
        timeout-minutes: 15
        run: |
          export PATH=$PATH:$ANDROID_HOME/platform-tools
          $ANDROID_HOME/emulator/emulator @emu -no-boot-anim &
          adb wait-for-device; adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'; adb shell wm dismiss-keyguard

      - name: Test
        timeout-minutes: 15
        run: |
          yarn test:android-release --record-videos all

      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: e2e-test-videos
          path: artifacts

  deploy-ios:
    needs: e2e-ios
    runs-on: macos-latest
    if: "github.ref == 'refs/heads/master'"

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Specify node version
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Caching cocoa pods
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install deps
        run: |
          yarn --frozen-lockfile --network-timeout 1000000

      - name: Cocoapod install
        run: |
          npx pod-install ios

      - name: Post Install
        env:
          GOOGLE_MAPS_KEY_ANDROID: ${{ secrets.GOOGLE_MAPS_KEY_ANDROID }}
        run: |
          sed -i.bak ''s/REPLACE_BUILD_NUMBER/${GITHUB_RUN_NUMBER}/'' .env
          sed -i.bak ''s/REPLACE_MAPS_KEY/${GOOGLE_MAPS_KEY_ANDROID}/'' .env

      - name: Fastlane setup
        working-directory: ios
        run: |
          bundle install

      - name: Deploy iOS & Upload to TestFlight
        working-directory: ios
        env:
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          PAT: ${{ secrets.PAT }}
        run: |
          bundle exec fastlane ios beta_ci

  deploy-android:
    needs: e2e-android
    runs-on: macos-latest
    if: "github.ref == 'refs/heads/master'"

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Specify node version
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install deps
        run: |
          yarn --frozen-lockfile --network-timeout 1000000

      # - name: Cache gradle
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      - name: Post Install
        env:
          GOOGLE_MAPS_KEY_ANDROID: ${{ secrets.GOOGLE_MAPS_KEY_ANDROID }}
        run: |
          sed -i.bak ''s/REPLACE_BUILD_NUMBER/${GITHUB_RUN_NUMBER}/'' .env
          sed -i.bak ''s/REPLACE_MAPS_KEY/${GOOGLE_MAPS_KEY_ANDROID}/'' .env

      - name: Fastlane setup
        run: |
          cd android; bundle install

      - name: Deploy Android Bundle & Upload to Beta Test Track
        working-directory: android
        env:
          KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          AT: ${{ secrets.ANDROID_TOKEN }}
          ANDROID_KEYSTORE_PROPERTIES: ${{ secrets.ANDROID_KEYSTORE_PROPERTIES }}
        run: |
          echo "$KEYSTORE" | base64 -d > ./release.keystore
          echo "$AT" | base64 -d > ./play.json
          echo "$ANDROID_KEYSTORE_PROPERTIES" | base64 -d > ./keystore.properties
          bundle exec fastlane android beta
